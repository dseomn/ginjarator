# Copyright 2025 David Mandelberg
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Initializing a ginjarator project and generating its build file."""

import json
import pathlib
import textwrap

from ginjarator import build
from ginjarator import config
from ginjarator import filesystem
from ginjarator import paths
from ginjarator import template

_NINJA_REQUIRED_VERSION = "1.10"


def _main_ninja_for_template(template_name: paths.Filesystem) -> str:
    state_path = paths.template_state(template_name)
    depfile_path = paths.template_depfile(template_name)
    dyndep_path = paths.template_dyndep(template_name)
    render_stamp_path = paths.template_render_stamp(template_name)
    return textwrap.dedent(
        f"""\
        build $
                {build.to_ninja(state_path)} $
                | $
                {build.to_ninja(depfile_path)} $
                {build.to_ninja(dyndep_path)} $
                : $
                scan $
                {build.to_ninja(template_name)} $
                || $
                {build.to_ninja(paths.NINJA_ENTRYPOINT)}
            depfile = {build.to_ninja(depfile_path)}

        build $
                {build.to_ninja(render_stamp_path)} $
                : $
                render $
                {build.to_ninja(template_name)} $
                | $
                {build.to_ninja(state_path)} $
                || $
                {build.to_ninja(dyndep_path)} $
                {build.to_ninja(paths.SCAN_DONE_STAMP)}
            dyndep = {build.to_ninja(dyndep_path)}
        """
    )


def _main_ninja(
    *,
    fs: filesystem.Filesystem,
    config_: config.Config,
) -> str:
    scan_done_dependencies = []

    parts = []
    parts.append(
        textwrap.dedent(
            f"""\
            ninja_required_version = {_NINJA_REQUIRED_VERSION}

            rule init
                command = ginjarator init
                description = INIT
                generator = true

            rule scan
                command = ginjarator scan $in
                description = SCAN $in

            rule render
                command = ginjarator render $in
                description = RENDER $in

            rule touch
                command = touch $out
            """
        )
    )

    for template_name in config_.templates:
        parts.append(_main_ninja_for_template(template_name))
        scan_done_dependencies.append(paths.template_state(template_name))

    fs.write_text(
        paths.NINJA_ENTRYPOINT_DEPFILE,
        build.to_depfile(
            first_output=paths.NINJA_ENTRYPOINT,
            dependencies=fs.dependencies,
        ),
    )

    parts.append(
        textwrap.dedent(
            f"""\
            build $
                    {build.to_ninja(paths.NINJA_ENTRYPOINT)} $
                    {build.to_ninja(sorted(fs.outputs))} $
                    : $
                    init
                depfile = {build.to_ninja(paths.NINJA_ENTRYPOINT_DEPFILE)}

            build $
                    {build.to_ninja(paths.SCAN_DONE_STAMP)} $
                    : $
                    touch $
                    | $
                    {build.to_ninja(scan_done_dependencies)}
                description = STAMP done scanning
            """
        )
    )

    return "\n".join(parts)


def init(
    *,
    root_path: pathlib.Path = pathlib.Path("."),
) -> None:
    """Initializes a ginjarator project and generates its build files."""
    fs = filesystem.Filesystem(root_path)
    config_ = fs.read_config()
    subninjas = []

    fs.write_text(
        paths.INTERNAL / ".gitignore",
        textwrap.dedent(
            """\
            # Automatically generated by ginjarator.
            *
            """
        ),
    )

    fs.write_text(
        paths.MINIMAL_CONFIG,
        json.dumps(
            config_.serialize_minimal(),
            ensure_ascii=False,
            indent=2,
            sort_keys=True,
        ),
    )

    for template_name in config_.ninja_templates:
        template_ninja_path = paths.ninja_template_output(template_name)
        subninjas.append(template_ninja_path)
        fs.write_text(
            template_ninja_path,
            template.ninja(str(template_name), internal_fs=fs),
        )

    # This has to be the last subninja, so that it can include the dependencies
    # and outputs added by previous subninjas.
    fs.add_output(paths.NINJA_MAIN)
    subninjas.append(paths.NINJA_MAIN)
    fs.write_text(paths.NINJA_MAIN, _main_ninja(fs=fs, config_=config_))

    fs.write_text(
        paths.NINJA_ENTRYPOINT,
        "".join(
            (
                f"ninja_required_version = {_NINJA_REQUIRED_VERSION}\n",
                f"builddir = {build.to_ninja(paths.NINJA_BUILDDIR)}\n",
                *(
                    f"subninja {build.to_ninja(subninja)}\n"
                    for subninja in subninjas
                ),
            )
        ),
    )
