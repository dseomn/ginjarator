# Copyright 2025 David Mandelberg
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Initializing a ginjarator project and generating its build file."""

import json
import pathlib
import textwrap

from ginjarator import _build
from ginjarator import _config
from ginjarator import _filesystem
from ginjarator import _paths
from ginjarator import _template

_NINJA_REQUIRED_VERSION = "1.10"


def _main_ninja_for_template(template_path: _paths.Filesystem) -> str:
    state_path = _paths.template_state(template_path)
    depfile_path = _paths.template_depfile(template_path)
    dyndep_path = _paths.template_dyndep(template_path)
    render_stamp_path = _paths.template_render_stamp(template_path)
    return textwrap.dedent(
        f"""\
        build $
                {_build.to_ninja(state_path)} $
                | $
                {_build.to_ninja(depfile_path)} $
                {_build.to_ninja(dyndep_path)} $
                : $
                scan $
                {_build.to_ninja(template_path)} $
                | $
                {_build.to_ninja(_paths.MINIMAL_CONFIG)} $
                || $
                {_build.to_ninja(_paths.NINJA_ENTRYPOINT)}
            depfile = {_build.to_ninja(depfile_path)}

        build $
                {_build.to_ninja(render_stamp_path)} $
                : $
                render $
                {_build.to_ninja(template_path)} $
                | $
                {_build.to_ninja(state_path)} $
                {_build.to_ninja(_paths.MINIMAL_CONFIG)} $
                || $
                {_build.to_ninja(dyndep_path)} $
                {_build.to_ninja(_paths.SCAN_DONE_STAMP)}
            dyndep = {_build.to_ninja(dyndep_path)}
        """
    )


def _main_ninja(
    *,
    fs: _filesystem.Filesystem,
    config_: _config.Config,
) -> str:
    scan_done_dependencies = []

    parts = []
    parts.append(
        textwrap.dedent(
            f"""\
            ninja_required_version = {_NINJA_REQUIRED_VERSION}

            rule init
                command = ginjarator init
                description = INIT
                generator = true

            rule minimal_config
                command = ginjarator minimal-config
                description = MINIMAL CONIG
                restat = true

            rule scan
                command = ginjarator scan $in
                description = SCAN $in

            rule render
                command = ginjarator render $in
                description = RENDER $in

            rule touch
                command = touch $out
            """
        )
    )

    for template_path in config_.templates:
        parts.append(_main_ninja_for_template(template_path))
        scan_done_dependencies.append(_paths.template_dyndep(template_path))

    fs.write_text(
        _paths.NINJA_ENTRYPOINT_DEPFILE,
        _build.to_depfile(
            first_output=_paths.NINJA_ENTRYPOINT,
            dependencies=fs.dependencies,
        ),
    )

    parts.append(
        textwrap.dedent(
            f"""\
            build $
                    {_build.to_ninja(_paths.NINJA_ENTRYPOINT)} $
                    {_build.to_ninja(sorted(fs.outputs))} $
                    : $
                    init
                depfile = {_build.to_ninja(_paths.NINJA_ENTRYPOINT_DEPFILE)}

            build $
                    {_build.to_ninja(_paths.MINIMAL_CONFIG)} $
                    : $
                    minimal_config $
                    {_build.to_ninja(_paths.CONFIG)}

            build $
                    {_build.to_ninja(_paths.SCAN_DONE_STAMP)} $
                    : $
                    touch $
                    | $
                    {_build.to_ninja(scan_done_dependencies)}
                description = STAMP done scanning
            """
        )
    )

    return "\n".join(parts)


def init(
    *,
    root_path: pathlib.Path = pathlib.Path("."),
) -> None:
    """Initializes a ginjarator project and generates its build files."""
    fs = _filesystem.Filesystem(root_path)
    config_ = fs.read_config()
    subninjas = []

    fs.write_text(
        _paths.INTERNAL / ".gitignore",
        textwrap.dedent(
            """\
            # Automatically generated by ginjarator.
            *
            """
        ),
    )

    for template_path in config_.ninja_templates:
        template_ninja_path = _paths.ninja_template_output(template_path)
        subninjas.append(template_ninja_path)
        fs.write_text(
            template_ninja_path,
            _template.ninja(template_path, internal_fs=fs),
        )

    # This has to be the last subninja, so that it can include the dependencies
    # and outputs added by previous subninjas.
    fs.add_output(_paths.NINJA_MAIN)
    subninjas.append(_paths.NINJA_MAIN)
    fs.write_text(_paths.NINJA_MAIN, _main_ninja(fs=fs, config_=config_))

    fs.write_text(
        _paths.NINJA_ENTRYPOINT,
        "".join(
            (
                f"ninja_required_version = {_NINJA_REQUIRED_VERSION}\n",
                f"builddir = {_build.to_ninja(_paths.NINJA_BUILDDIR)}\n",
                *(
                    f"subninja {_build.to_ninja(subninja)}\n"
                    for subninja in subninjas
                ),
            )
        ),
    )


def minimal_config(
    *,
    root_path: pathlib.Path = pathlib.Path("."),
) -> None:
    """Generates the minimal config file."""
    fs = _filesystem.Filesystem(root_path)
    try:
        raw_old = json.loads(
            fs.read_text(_paths.MINIMAL_CONFIG, defer_ok=False)
        )
    except FileNotFoundError:
        raw_old = None
    raw_new = fs.read_config().serialize_minimal()
    if raw_new == raw_old:
        return
    fs.write_text(
        _paths.MINIMAL_CONFIG,
        json.dumps(raw_new, ensure_ascii=False, indent=2, sort_keys=True),
    )
